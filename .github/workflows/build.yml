name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24']
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Build
      run: go build -v ./...

    - name: Build with race detector (Unix only)
      if: matrix.os != 'windows-latest'
      run: go build -race -v ./...

    - name: Cross-compile check
      run: |
        GOOS=linux GOARCH=amd64 go build ./...
        GOOS=darwin GOARCH=amd64 go build ./...
        GOOS=windows GOARCH=amd64 go build ./...

    - name: Check for unused dependencies
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        go mod tidy
        if git diff --quiet --exit-code go.mod; then
          echo "✅ go.mod is clean"
        else
          echo "❌ go.mod has uncommitted changes after go mod tidy"
          git diff go.mod
          exit 1
        fi
        if [ -f go.sum ]; then
          if git diff --quiet --exit-code go.sum; then
            echo "✅ go.sum is clean"
          else
            echo "❌ go.sum has uncommitted changes after go mod tidy"
            git diff go.sum
            exit 1
          fi
        else
          echo "✅ No go.sum file (no external dependencies)"
        fi

    - name: Verify no main packages
      run: |
        if find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" | xargs grep -l "^package main" | grep -v "_test.go"; then
          echo "❌ Found main packages in library code"
          exit 1
        else
          echo "✅ No main packages found - library structure correct"
        fi
